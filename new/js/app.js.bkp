(function(){ 
	var globalStepCounter = 0;
    var fileJSON=[];
    var config;
    var currentStepIndex = 0;
    $.getJSON('../config.json', function(data) {
        config = data;
    }); 
    var filterDataTable;
    var files;

    var app = angular.module('bddapp', [ ]);

	app.service("WorkflowService", function () {
    	var numSteps = 0,
    		currentStep = 0;

    	var wfData = [];

    	var configData = [];

		this.getWorkflow = function() {
			return wfData;
		}

		this.getCurrentStep = function() {
			return currentStep;
		}


	});


	app.controller('FileLoadController', function($scope, Workflow) {
		console.log("file load called");
		//var test = new Workflow();
	    $scope.users = UserService.all();
		$scope.handleFileSelect = function() {
			var file = document.getElementById('files').files[0],
	        	reader = new FileReader(),
	        	output = [];
		    output.push('<strong>', escape(file.name), '</strong> (', file.type || 'n/a', ') - ',
		    	file.size, ' bytes, last modified: ',
		    	file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() : 'n/a','');
		    document.getElementById('list').innerHTML = output.join('');
	        reader.onload = receivedText;
	        reader.readAsText(file);
	        //console.log(fileText);
	        function receivedText() { 
	            //result = fr.result; 
	            //var test = new Workflow();
	            //fileJSON = Workflow.data;
	            fileJSON = JSON.parse(reader.result);
	            test.data = fileJSON;
	            console.log("File json");
	            console.log(fileJSON);
	            console.log("wf data");
	            //console(Workflow.data);
	            $('#step1').show();
	            loadWFSteps(fileJSON);
	            loadSelects(fileJSON);
	            loadTableTop(fileJSON);
	        }
    	}
	});


	app.controller('BDDFrameworkController', ['$scope', function($scope, Workflow) {
		//$scope.wfData = Workflow;
		//console.log(wfData);
		console.log("controller null");
	}]);

    //document.getElementById('files').addEventListener('change', handleFileSelect, false);

    function loadWFSteps(fileJSON)
    {
        globalStepCounter = fileJSON.workflow.length;
        $.each(fileJSON.workflow,function(i,obj) {
            $('#steps-menu').append('<li><a href="#"><i class="fa '+config.step_type.filter(function(a){ return a.id === obj.id; })[0].icon+' fa-filter fa-fw"></i> Step '+(obj.index+1)+' - '+config.step_type.filter(function(a){ return a.id === obj.id; })[0].text+'</a></li>');
        });
    }

    function loadSelects(fileJSON)
    {
        // select step
        $("select[step='1'][name='stepType']").select2({
            data: config.step_type,
            placeholder: {
                id: "-1",
                text: "Select Step"
            }
        });
        $("select[step='1'][name='stepType']").select2("val",fileJSON.workflow.filter(function(a){ return a.index === 1; })[0].id);

        // select database
        $("select[step='1'][name='database']").select2({
            data: config.database,
            placeholder: {
                id: "-1",
                text: "Select Database"
            }
        });
        $("select[step='1'][name='database']").select2("val",fileJSON.workflow.filter(function(a){ return a.index === 1; })[0].database);

        // select table
        $("select[step='1'][name='table']").select2({
            data: config.table,
            placeholder: {
                id: "-1",
                text: "Select Table"
            }
        });
        $("select[step='1'][name='table']").select2("val",fileJSON.workflow.filter(function(a){ return a.index === 1; })[0].table);
    }

    function loadTableTop(fileJSON)
    {
        filterDataTable = $("table[step='1'][name='table-top']").DataTable({
            "data": fileJSON.workflow.filter(function(a){ return a.id === 1; })[0].data,
            "columns": config.step_type.filter(function(a){ return a.id === 1; })[0].columns
        });
    }

    function addFilter(formData)
    {
        //console.log(formData);
        $('#newFilterModal').modal('hide')
        var newFilterJSON = jsonParseArray(formData);
        filterDataTable.row.add(newFilterJSON).draw();
        updateMaster(currentStepIndex);
        //console.log(newFilterJSON);
        
    }

    function jsonParseArray(formData)
    {
        var o = {};
        $.each(formData, function() {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return o;
    }

    function updateMaster(stepIndex)
    {
        delete fileJSON.workflow[stepIndex].data;
        fileJSON.workflow[stepIndex].data = [];
        for(i=0; i<filterDataTable.data().length; i++)
        {
            fileJSON.workflow[stepIndex].data.push(filterDataTable.data()[i]);   
        }
        console.log(JSON.stringify(fileJSON));
    }

    function saveWorkflow()
    {

        var blob = new Blob([JSON.stringify(fileJSON)], {type: "text/plain;charset=utf-8"});
        saveAs(blob, files[0].name);
    }

})();